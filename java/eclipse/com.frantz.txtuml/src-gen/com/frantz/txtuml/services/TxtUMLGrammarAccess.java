/*
* generated by Xtext
*/
package com.frantz.txtuml.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class TxtUMLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//Model:
		//	statements+=Statement*;
		public ParserRule getRule() { return rule; }

		//statements+=Statement*
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSequenceDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Statement:
		//	ClassDecl | SequenceDecl;
		public ParserRule getRule() { return rule; }

		//ClassDecl | SequenceDecl
		public Alternatives getAlternatives() { return cAlternatives; }

		//ClassDecl
		public RuleCall getClassDeclParserRuleCall_0() { return cClassDeclParserRuleCall_0; }

		//SequenceDecl
		public RuleCall getSequenceDeclParserRuleCall_1() { return cSequenceDeclParserRuleCall_1; }
	}

	public class ClassDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cInheritsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInheritsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cInheritsClassDeclCrossReference_2_1_0 = (CrossReference)cInheritsAssignment_2_1.eContents().get(0);
		private final RuleCall cInheritsClassDeclIDTerminalRuleCall_2_1_0_1 = (RuleCall)cInheritsClassDeclCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cInheritsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cInheritsClassDeclCrossReference_2_2_1_0 = (CrossReference)cInheritsAssignment_2_2_1.eContents().get(0);
		private final RuleCall cInheritsClassDeclIDTerminalRuleCall_2_2_1_0_1 = (RuleCall)cInheritsClassDeclCrossReference_2_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSectionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSectionsClassSectionDeclParserRuleCall_4_0 = (RuleCall)cSectionsAssignment_4.eContents().get(0);
		private final Assignment cSectionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSectionsClassSectionDeclParserRuleCall_5_0 = (RuleCall)cSectionsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ClassDecl:
		//	"class" name=ID ("inherits" inherits+=[ClassDecl] ("," inherits+=[ClassDecl])*)? "{" sections+=ClassSectionDecl
		//	sections+=ClassSectionDecl* "}";
		public ParserRule getRule() { return rule; }

		//"class" name=ID ("inherits" inherits+=[ClassDecl] ("," inherits+=[ClassDecl])*)? "{" sections+=ClassSectionDecl
		//sections+=ClassSectionDecl* "}"
		public Group getGroup() { return cGroup; }

		//"class"
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("inherits" inherits+=[ClassDecl] ("," inherits+=[ClassDecl])*)?
		public Group getGroup_2() { return cGroup_2; }

		//"inherits"
		public Keyword getInheritsKeyword_2_0() { return cInheritsKeyword_2_0; }

		//inherits+=[ClassDecl]
		public Assignment getInheritsAssignment_2_1() { return cInheritsAssignment_2_1; }

		//[ClassDecl]
		public CrossReference getInheritsClassDeclCrossReference_2_1_0() { return cInheritsClassDeclCrossReference_2_1_0; }

		//ID
		public RuleCall getInheritsClassDeclIDTerminalRuleCall_2_1_0_1() { return cInheritsClassDeclIDTerminalRuleCall_2_1_0_1; }

		//("," inherits+=[ClassDecl])*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//inherits+=[ClassDecl]
		public Assignment getInheritsAssignment_2_2_1() { return cInheritsAssignment_2_2_1; }

		//[ClassDecl]
		public CrossReference getInheritsClassDeclCrossReference_2_2_1_0() { return cInheritsClassDeclCrossReference_2_2_1_0; }

		//ID
		public RuleCall getInheritsClassDeclIDTerminalRuleCall_2_2_1_0_1() { return cInheritsClassDeclIDTerminalRuleCall_2_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//sections+=ClassSectionDecl
		public Assignment getSectionsAssignment_4() { return cSectionsAssignment_4; }

		//ClassSectionDecl
		public RuleCall getSectionsClassSectionDeclParserRuleCall_4_0() { return cSectionsClassSectionDeclParserRuleCall_4_0; }

		//sections+=ClassSectionDecl*
		public Assignment getSectionsAssignment_5() { return cSectionsAssignment_5; }

		//ClassSectionDecl
		public RuleCall getSectionsClassSectionDeclParserRuleCall_5_0() { return cSectionsClassSectionDeclParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ClassMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMethodDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAttributeDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAssociationDeclParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ClassMember:
		//	MethodDecl | AttributeDecl | AssociationDecl;
		public ParserRule getRule() { return rule; }

		//MethodDecl | AttributeDecl | AssociationDecl
		public Alternatives getAlternatives() { return cAlternatives; }

		//MethodDecl
		public RuleCall getMethodDeclParserRuleCall_0() { return cMethodDeclParserRuleCall_0; }

		//AttributeDecl
		public RuleCall getAttributeDeclParserRuleCall_1() { return cAttributeDeclParserRuleCall_1; }

		//AssociationDecl
		public RuleCall getAssociationDeclParserRuleCall_2() { return cAssociationDeclParserRuleCall_2; }
	}

	public class ClassSectionDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassSectionDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityDeclParserRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Assignment cMembersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMembersClassMemberParserRuleCall_1_0 = (RuleCall)cMembersAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMembersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMembersClassMemberParserRuleCall_2_1_0 = (RuleCall)cMembersAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ClassSectionDecl:
		//	visibility=VisibilityDecl? members+=ClassMember ("," members+=ClassMember)* ";";
		public ParserRule getRule() { return rule; }

		//visibility=VisibilityDecl? members+=ClassMember ("," members+=ClassMember)* ";"
		public Group getGroup() { return cGroup; }

		//visibility=VisibilityDecl?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }

		//VisibilityDecl
		public RuleCall getVisibilityVisibilityDeclParserRuleCall_0_0() { return cVisibilityVisibilityDeclParserRuleCall_0_0; }

		//members+=ClassMember
		public Assignment getMembersAssignment_1() { return cMembersAssignment_1; }

		//ClassMember
		public RuleCall getMembersClassMemberParserRuleCall_1_0() { return cMembersClassMemberParserRuleCall_1_0; }

		//("," members+=ClassMember)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//members+=ClassMember
		public Assignment getMembersAssignment_2_1() { return cMembersAssignment_2_1; }

		//ClassMember
		public RuleCall getMembersClassMemberParserRuleCall_2_1_0() { return cMembersClassMemberParserRuleCall_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class VisibilityDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VisibilityDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//VisibilityDecl:
		//	visibility=Visibility ":";
		public ParserRule getRule() { return rule; }

		//visibility=Visibility ":"
		public Group getGroup() { return cGroup; }

		//visibility=Visibility
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }

		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_0_0() { return cVisibilityVisibilityEnumRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
	}

	public class MethodDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReturnTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReturnTypeDataTypeEnumRuleCall_0_0 = (RuleCall)cReturnTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MethodDecl:
		//	returnType=DataType name=ID "(" ")";
		public ParserRule getRule() { return rule; }

		//returnType=DataType name=ID "(" ")"
		public Group getGroup() { return cGroup; }

		//returnType=DataType
		public Assignment getReturnTypeAssignment_0() { return cReturnTypeAssignment_0; }

		//DataType
		public RuleCall getReturnTypeDataTypeEnumRuleCall_0_0() { return cReturnTypeDataTypeEnumRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class AttributeDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeDataTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//AttributeDecl:
		//	type=DataType name=ID;
		public ParserRule getRule() { return rule; }

		//type=DataType name=ID
		public Group getGroup() { return cGroup; }

		//type=DataType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//DataType
		public RuleCall getTypeDataTypeEnumRuleCall_0_0() { return cTypeDataTypeEnumRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class AssociationDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssociationDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeClassDeclCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeClassDeclIDTerminalRuleCall_0_0_1 = (RuleCall)cTypeClassDeclCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//AssociationDecl:
		//	type=[ClassDecl] name=ID;
		public ParserRule getRule() { return rule; }

		//type=[ClassDecl] name=ID
		public Group getGroup() { return cGroup; }

		//type=[ClassDecl]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[ClassDecl]
		public CrossReference getTypeClassDeclCrossReference_0_0() { return cTypeClassDeclCrossReference_0_0; }

		//ID
		public RuleCall getTypeClassDeclIDTerminalRuleCall_0_0_1() { return cTypeClassDeclIDTerminalRuleCall_0_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class SequenceDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SequenceDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSequenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cSectionsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cSectionsSequenceSectionDeclParserRuleCall_3_0_0 = (RuleCall)cSectionsAssignment_3_0.eContents().get(0);
		private final Assignment cSectionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSectionsSequenceSectionDeclParserRuleCall_3_1_0 = (RuleCall)cSectionsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SequenceDecl:
		//	"sequence" name=ID "{" (sections+=SequenceSectionDecl sections+=SequenceSectionDecl*)? "}";
		public ParserRule getRule() { return rule; }

		//"sequence" name=ID "{" (sections+=SequenceSectionDecl sections+=SequenceSectionDecl*)? "}"
		public Group getGroup() { return cGroup; }

		//"sequence"
		public Keyword getSequenceKeyword_0() { return cSequenceKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(sections+=SequenceSectionDecl sections+=SequenceSectionDecl*)?
		public Group getGroup_3() { return cGroup_3; }

		//sections+=SequenceSectionDecl
		public Assignment getSectionsAssignment_3_0() { return cSectionsAssignment_3_0; }

		//SequenceSectionDecl
		public RuleCall getSectionsSequenceSectionDeclParserRuleCall_3_0_0() { return cSectionsSequenceSectionDeclParserRuleCall_3_0_0; }

		//sections+=SequenceSectionDecl*
		public Assignment getSectionsAssignment_3_1() { return cSectionsAssignment_3_1; }

		//SequenceSectionDecl
		public RuleCall getSectionsSequenceSectionDeclParserRuleCall_3_1_0() { return cSectionsSequenceSectionDeclParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class SequenceSectionDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SequenceSectionDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActorSectionDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMessageSectionDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SequenceSectionDecl:
		//	ActorSectionDecl | MessageSectionDecl;
		public ParserRule getRule() { return rule; }

		//ActorSectionDecl | MessageSectionDecl
		public Alternatives getAlternatives() { return cAlternatives; }

		//ActorSectionDecl
		public RuleCall getActorSectionDeclParserRuleCall_0() { return cActorSectionDeclParserRuleCall_0; }

		//MessageSectionDecl
		public RuleCall getMessageSectionDeclParserRuleCall_1() { return cMessageSectionDeclParserRuleCall_1; }
	}

	public class ActorSectionDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActorSectionDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActorsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cActorsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActorsActorDeclParserRuleCall_2_0 = (RuleCall)cActorsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cActorsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cActorsActorDeclParserRuleCall_3_1_0 = (RuleCall)cActorsAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ActorSectionDecl:
		//	"actors" ":" actors+=ActorDecl ("," actors+=ActorDecl)* ";";
		public ParserRule getRule() { return rule; }

		//"actors" ":" actors+=ActorDecl ("," actors+=ActorDecl)* ";"
		public Group getGroup() { return cGroup; }

		//"actors"
		public Keyword getActorsKeyword_0() { return cActorsKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//actors+=ActorDecl
		public Assignment getActorsAssignment_2() { return cActorsAssignment_2; }

		//ActorDecl
		public RuleCall getActorsActorDeclParserRuleCall_2_0() { return cActorsActorDeclParserRuleCall_2_0; }

		//("," actors+=ActorDecl)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//actors+=ActorDecl
		public Assignment getActorsAssignment_3_1() { return cActorsAssignment_3_1; }

		//ActorDecl
		public RuleCall getActorsActorDeclParserRuleCall_3_1_0() { return cActorsActorDeclParserRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class MessageSectionDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MessageSectionDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMessagesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMessagesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMessagesMessageDeclParserRuleCall_2_0 = (RuleCall)cMessagesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cActorsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cActorsMessageDeclParserRuleCall_3_1_0 = (RuleCall)cActorsAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MessageSectionDecl:
		//	"messages" ":" messages+=MessageDecl ("," actors+=MessageDecl)* ";";
		public ParserRule getRule() { return rule; }

		//"messages" ":" messages+=MessageDecl ("," actors+=MessageDecl)* ";"
		public Group getGroup() { return cGroup; }

		//"messages"
		public Keyword getMessagesKeyword_0() { return cMessagesKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//messages+=MessageDecl
		public Assignment getMessagesAssignment_2() { return cMessagesAssignment_2; }

		//MessageDecl
		public RuleCall getMessagesMessageDeclParserRuleCall_2_0() { return cMessagesMessageDeclParserRuleCall_2_0; }

		//("," actors+=MessageDecl)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//actors+=MessageDecl
		public Assignment getActorsAssignment_3_1() { return cActorsAssignment_3_1; }

		//MessageDecl
		public RuleCall getActorsMessageDeclParserRuleCall_3_1_0() { return cActorsMessageDeclParserRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ActorDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActorDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cClassRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cClassRefClassDeclCrossReference_1_0 = (CrossReference)cClassRefAssignment_1.eContents().get(0);
		private final RuleCall cClassRefClassDeclIDTerminalRuleCall_1_0_1 = (RuleCall)cClassRefClassDeclCrossReference_1_0.eContents().get(1);
		
		//ActorDecl:
		//	name=ID classRef=[ClassDecl]?;
		public ParserRule getRule() { return rule; }

		//name=ID classRef=[ClassDecl]?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//classRef=[ClassDecl]?
		public Assignment getClassRefAssignment_1() { return cClassRefAssignment_1; }

		//[ClassDecl]
		public CrossReference getClassRefClassDeclCrossReference_1_0() { return cClassRefClassDeclCrossReference_1_0; }

		//ID
		public RuleCall getClassRefClassDeclIDTerminalRuleCall_1_0_1() { return cClassRefClassDeclIDTerminalRuleCall_1_0_1; }
	}

	public class MessageDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MessageDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cLeftOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cLeftOpActorDeclCrossReference_1_0 = (CrossReference)cLeftOpAssignment_1.eContents().get(0);
		private final RuleCall cLeftOpActorDeclIDTerminalRuleCall_1_0_1 = (RuleCall)cLeftOpActorDeclCrossReference_1_0.eContents().get(1);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorMessageOperatorEnumRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cRighOpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRighOpActorDeclCrossReference_3_0 = (CrossReference)cRighOpAssignment_3.eContents().get(0);
		private final RuleCall cRighOpActorDeclIDTerminalRuleCall_3_0_1 = (RuleCall)cRighOpActorDeclCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMethodAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cMethodMethodDeclCrossReference_4_1_0 = (CrossReference)cMethodAssignment_4_1.eContents().get(0);
		private final RuleCall cMethodMethodDeclIDTerminalRuleCall_4_1_0_1 = (RuleCall)cMethodMethodDeclCrossReference_4_1_0.eContents().get(1);
		
		//MessageDecl:
		//	name=ID leftOp=[ActorDecl] operator=MessageOperator righOp=[ActorDecl] (":" method=[MethodDecl])?;
		public ParserRule getRule() { return rule; }

		//name=ID leftOp=[ActorDecl] operator=MessageOperator righOp=[ActorDecl] (":" method=[MethodDecl])?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//leftOp=[ActorDecl]
		public Assignment getLeftOpAssignment_1() { return cLeftOpAssignment_1; }

		//[ActorDecl]
		public CrossReference getLeftOpActorDeclCrossReference_1_0() { return cLeftOpActorDeclCrossReference_1_0; }

		//ID
		public RuleCall getLeftOpActorDeclIDTerminalRuleCall_1_0_1() { return cLeftOpActorDeclIDTerminalRuleCall_1_0_1; }

		//operator=MessageOperator
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }

		//MessageOperator
		public RuleCall getOperatorMessageOperatorEnumRuleCall_2_0() { return cOperatorMessageOperatorEnumRuleCall_2_0; }

		//righOp=[ActorDecl]
		public Assignment getRighOpAssignment_3() { return cRighOpAssignment_3; }

		//[ActorDecl]
		public CrossReference getRighOpActorDeclCrossReference_3_0() { return cRighOpActorDeclCrossReference_3_0; }

		//ID
		public RuleCall getRighOpActorDeclIDTerminalRuleCall_3_0_1() { return cRighOpActorDeclIDTerminalRuleCall_3_0_1; }

		//(":" method=[MethodDecl])?
		public Group getGroup_4() { return cGroup_4; }

		//":"
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }

		//method=[MethodDecl]
		public Assignment getMethodAssignment_4_1() { return cMethodAssignment_4_1; }

		//[MethodDecl]
		public CrossReference getMethodMethodDeclCrossReference_4_1_0() { return cMethodMethodDeclCrossReference_4_1_0; }

		//ID
		public RuleCall getMethodMethodDeclIDTerminalRuleCall_4_1_0_1() { return cMethodMethodDeclIDTerminalRuleCall_4_1_0_1; }
	}
	
	
	public class MessageOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "MessageOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRIGHT_MSGEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRIGHT_MSGHyphenMinusHyphenMinusGreaterThanSignKeyword_0_0 = (Keyword)cRIGHT_MSGEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLEFT_MSGEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLEFT_MSGLessThanSignHyphenMinusHyphenMinusKeyword_1_0 = (Keyword)cLEFT_MSGEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum MessageOperator:
		//	RIGHT_MSG="-->" | LEFT_MSG="<--";
		public EnumRule getRule() { return rule; }

		//RIGHT_MSG="-->" | LEFT_MSG="<--"
		public Alternatives getAlternatives() { return cAlternatives; }

		//RIGHT_MSG="-->"
		public EnumLiteralDeclaration getRIGHT_MSGEnumLiteralDeclaration_0() { return cRIGHT_MSGEnumLiteralDeclaration_0; }

		//"-->"
		public Keyword getRIGHT_MSGHyphenMinusHyphenMinusGreaterThanSignKeyword_0_0() { return cRIGHT_MSGHyphenMinusHyphenMinusGreaterThanSignKeyword_0_0; }

		//LEFT_MSG="<--"
		public EnumLiteralDeclaration getLEFT_MSGEnumLiteralDeclaration_1() { return cLEFT_MSGEnumLiteralDeclaration_1; }

		//"<--"
		public Keyword getLEFT_MSGLessThanSignHyphenMinusHyphenMinusKeyword_1_0() { return cLEFT_MSGLessThanSignHyphenMinusHyphenMinusKeyword_1_0; }
	}

	public class DataTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBOOLEANEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBOOLEANBooleanKeyword_0_0 = (Keyword)cBOOLEANEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSTRINGStringKeyword_1_0 = (Keyword)cSTRINGEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cINTEGEREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cINTEGERIntegerKeyword_2_0 = (Keyword)cINTEGEREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDOUBLEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDOUBLEDoubleKeyword_3_0 = (Keyword)cDOUBLEEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum DataType:
		//	BOOLEAN="boolean" | STRING="string" | INTEGER="integer" | DOUBLE="double";
		public EnumRule getRule() { return rule; }

		//BOOLEAN="boolean" | STRING="string" | INTEGER="integer" | DOUBLE="double"
		public Alternatives getAlternatives() { return cAlternatives; }

		//BOOLEAN="boolean"
		public EnumLiteralDeclaration getBOOLEANEnumLiteralDeclaration_0() { return cBOOLEANEnumLiteralDeclaration_0; }

		//"boolean"
		public Keyword getBOOLEANBooleanKeyword_0_0() { return cBOOLEANBooleanKeyword_0_0; }

		//STRING="string"
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_1() { return cSTRINGEnumLiteralDeclaration_1; }

		//"string"
		public Keyword getSTRINGStringKeyword_1_0() { return cSTRINGStringKeyword_1_0; }

		//INTEGER="integer"
		public EnumLiteralDeclaration getINTEGEREnumLiteralDeclaration_2() { return cINTEGEREnumLiteralDeclaration_2; }

		//"integer"
		public Keyword getINTEGERIntegerKeyword_2_0() { return cINTEGERIntegerKeyword_2_0; }

		//DOUBLE="double"
		public EnumLiteralDeclaration getDOUBLEEnumLiteralDeclaration_3() { return cDOUBLEEnumLiteralDeclaration_3; }

		//"double"
		public Keyword getDOUBLEDoubleKeyword_3_0() { return cDOUBLEDoubleKeyword_3_0; }
	}

	public class VisibilityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Visibility");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPUBLICPublicKeyword_0_0 = (Keyword)cPUBLICEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPRIVATEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPRIVATEPrivateKeyword_1_0 = (Keyword)cPRIVATEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Visibility:
		//	PUBLIC="public" | PRIVATE="private";
		public EnumRule getRule() { return rule; }

		//PUBLIC="public" | PRIVATE="private"
		public Alternatives getAlternatives() { return cAlternatives; }

		//PUBLIC="public"
		public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_0() { return cPUBLICEnumLiteralDeclaration_0; }

		//"public"
		public Keyword getPUBLICPublicKeyword_0_0() { return cPUBLICPublicKeyword_0_0; }

		//PRIVATE="private"
		public EnumLiteralDeclaration getPRIVATEEnumLiteralDeclaration_1() { return cPRIVATEEnumLiteralDeclaration_1; }

		//"private"
		public Keyword getPRIVATEPrivateKeyword_1_0() { return cPRIVATEPrivateKeyword_1_0; }
	}
	
	private ModelElements pModel;
	private StatementElements pStatement;
	private ClassDeclElements pClassDecl;
	private ClassMemberElements pClassMember;
	private ClassSectionDeclElements pClassSectionDecl;
	private VisibilityDeclElements pVisibilityDecl;
	private MethodDeclElements pMethodDecl;
	private AttributeDeclElements pAttributeDecl;
	private AssociationDeclElements pAssociationDecl;
	private SequenceDeclElements pSequenceDecl;
	private SequenceSectionDeclElements pSequenceSectionDecl;
	private ActorSectionDeclElements pActorSectionDecl;
	private MessageSectionDeclElements pMessageSectionDecl;
	private ActorDeclElements pActorDecl;
	private MessageDeclElements pMessageDecl;
	private MessageOperatorElements unknownRuleMessageOperator;
	private DataTypeElements unknownRuleDataType;
	private VisibilityElements unknownRuleVisibility;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public TxtUMLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.frantz.txtuml.TxtUML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	statements+=Statement*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Statement:
	//	ClassDecl | SequenceDecl;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//ClassDecl:
	//	"class" name=ID ("inherits" inherits+=[ClassDecl] ("," inherits+=[ClassDecl])*)? "{" sections+=ClassSectionDecl
	//	sections+=ClassSectionDecl* "}";
	public ClassDeclElements getClassDeclAccess() {
		return (pClassDecl != null) ? pClassDecl : (pClassDecl = new ClassDeclElements());
	}
	
	public ParserRule getClassDeclRule() {
		return getClassDeclAccess().getRule();
	}

	//ClassMember:
	//	MethodDecl | AttributeDecl | AssociationDecl;
	public ClassMemberElements getClassMemberAccess() {
		return (pClassMember != null) ? pClassMember : (pClassMember = new ClassMemberElements());
	}
	
	public ParserRule getClassMemberRule() {
		return getClassMemberAccess().getRule();
	}

	//ClassSectionDecl:
	//	visibility=VisibilityDecl? members+=ClassMember ("," members+=ClassMember)* ";";
	public ClassSectionDeclElements getClassSectionDeclAccess() {
		return (pClassSectionDecl != null) ? pClassSectionDecl : (pClassSectionDecl = new ClassSectionDeclElements());
	}
	
	public ParserRule getClassSectionDeclRule() {
		return getClassSectionDeclAccess().getRule();
	}

	//VisibilityDecl:
	//	visibility=Visibility ":";
	public VisibilityDeclElements getVisibilityDeclAccess() {
		return (pVisibilityDecl != null) ? pVisibilityDecl : (pVisibilityDecl = new VisibilityDeclElements());
	}
	
	public ParserRule getVisibilityDeclRule() {
		return getVisibilityDeclAccess().getRule();
	}

	//MethodDecl:
	//	returnType=DataType name=ID "(" ")";
	public MethodDeclElements getMethodDeclAccess() {
		return (pMethodDecl != null) ? pMethodDecl : (pMethodDecl = new MethodDeclElements());
	}
	
	public ParserRule getMethodDeclRule() {
		return getMethodDeclAccess().getRule();
	}

	//AttributeDecl:
	//	type=DataType name=ID;
	public AttributeDeclElements getAttributeDeclAccess() {
		return (pAttributeDecl != null) ? pAttributeDecl : (pAttributeDecl = new AttributeDeclElements());
	}
	
	public ParserRule getAttributeDeclRule() {
		return getAttributeDeclAccess().getRule();
	}

	//AssociationDecl:
	//	type=[ClassDecl] name=ID;
	public AssociationDeclElements getAssociationDeclAccess() {
		return (pAssociationDecl != null) ? pAssociationDecl : (pAssociationDecl = new AssociationDeclElements());
	}
	
	public ParserRule getAssociationDeclRule() {
		return getAssociationDeclAccess().getRule();
	}

	//SequenceDecl:
	//	"sequence" name=ID "{" (sections+=SequenceSectionDecl sections+=SequenceSectionDecl*)? "}";
	public SequenceDeclElements getSequenceDeclAccess() {
		return (pSequenceDecl != null) ? pSequenceDecl : (pSequenceDecl = new SequenceDeclElements());
	}
	
	public ParserRule getSequenceDeclRule() {
		return getSequenceDeclAccess().getRule();
	}

	//SequenceSectionDecl:
	//	ActorSectionDecl | MessageSectionDecl;
	public SequenceSectionDeclElements getSequenceSectionDeclAccess() {
		return (pSequenceSectionDecl != null) ? pSequenceSectionDecl : (pSequenceSectionDecl = new SequenceSectionDeclElements());
	}
	
	public ParserRule getSequenceSectionDeclRule() {
		return getSequenceSectionDeclAccess().getRule();
	}

	//ActorSectionDecl:
	//	"actors" ":" actors+=ActorDecl ("," actors+=ActorDecl)* ";";
	public ActorSectionDeclElements getActorSectionDeclAccess() {
		return (pActorSectionDecl != null) ? pActorSectionDecl : (pActorSectionDecl = new ActorSectionDeclElements());
	}
	
	public ParserRule getActorSectionDeclRule() {
		return getActorSectionDeclAccess().getRule();
	}

	//MessageSectionDecl:
	//	"messages" ":" messages+=MessageDecl ("," actors+=MessageDecl)* ";";
	public MessageSectionDeclElements getMessageSectionDeclAccess() {
		return (pMessageSectionDecl != null) ? pMessageSectionDecl : (pMessageSectionDecl = new MessageSectionDeclElements());
	}
	
	public ParserRule getMessageSectionDeclRule() {
		return getMessageSectionDeclAccess().getRule();
	}

	//ActorDecl:
	//	name=ID classRef=[ClassDecl]?;
	public ActorDeclElements getActorDeclAccess() {
		return (pActorDecl != null) ? pActorDecl : (pActorDecl = new ActorDeclElements());
	}
	
	public ParserRule getActorDeclRule() {
		return getActorDeclAccess().getRule();
	}

	//MessageDecl:
	//	name=ID leftOp=[ActorDecl] operator=MessageOperator righOp=[ActorDecl] (":" method=[MethodDecl])?;
	public MessageDeclElements getMessageDeclAccess() {
		return (pMessageDecl != null) ? pMessageDecl : (pMessageDecl = new MessageDeclElements());
	}
	
	public ParserRule getMessageDeclRule() {
		return getMessageDeclAccess().getRule();
	}

	//enum MessageOperator:
	//	RIGHT_MSG="-->" | LEFT_MSG="<--";
	public MessageOperatorElements getMessageOperatorAccess() {
		return (unknownRuleMessageOperator != null) ? unknownRuleMessageOperator : (unknownRuleMessageOperator = new MessageOperatorElements());
	}
	
	public EnumRule getMessageOperatorRule() {
		return getMessageOperatorAccess().getRule();
	}

	//enum DataType:
	//	BOOLEAN="boolean" | STRING="string" | INTEGER="integer" | DOUBLE="double";
	public DataTypeElements getDataTypeAccess() {
		return (unknownRuleDataType != null) ? unknownRuleDataType : (unknownRuleDataType = new DataTypeElements());
	}
	
	public EnumRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	//enum Visibility:
	//	PUBLIC="public" | PRIVATE="private";
	public VisibilityElements getVisibilityAccess() {
		return (unknownRuleVisibility != null) ? unknownRuleVisibility : (unknownRuleVisibility = new VisibilityElements());
	}
	
	public EnumRule getVisibilityRule() {
		return getVisibilityAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
