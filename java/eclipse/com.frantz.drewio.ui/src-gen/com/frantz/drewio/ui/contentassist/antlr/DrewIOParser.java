/*
* generated by Xtext
*/
package com.frantz.drewio.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import com.frantz.drewio.services.DrewIOGrammarAccess;

public class DrewIOParser extends AbstractContentAssistParser {
	
	@Inject
	private DrewIOGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected com.frantz.drewio.ui.contentassist.antlr.internal.InternalDrewIOParser createParser() {
		com.frantz.drewio.ui.contentassist.antlr.internal.InternalDrewIOParser result = new com.frantz.drewio.ui.contentassist.antlr.internal.InternalDrewIOParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getDataTypeAccess().getAlternatives(), "rule__DataType__Alternatives");
					put(grammarAccess.getInputStatementAccess().getGroup(), "rule__InputStatement__Group__0");
					put(grammarAccess.getInputStatementAccess().getGroup_3(), "rule__InputStatement__Group_3__0");
					put(grammarAccess.getInputStatementAccess().getGroup_3_3(), "rule__InputStatement__Group_3_3__0");
					put(grammarAccess.getOutputStatementAccess().getGroup(), "rule__OutputStatement__Group__0");
					put(grammarAccess.getOutputStatementAccess().getGroup_4(), "rule__OutputStatement__Group_4__0");
					put(grammarAccess.getOutputStatementAccess().getGroup_6(), "rule__OutputStatement__Group_6__0");
					put(grammarAccess.getOutputStatementAccess().getGroup_6_1(), "rule__OutputStatement__Group_6_1__0");
					put(grammarAccess.getOnRecievedAccess().getGroup(), "rule__OnRecieved__Group__0");
					put(grammarAccess.getColumnAccess().getGroup(), "rule__Column__Group__0");
					put(grammarAccess.getModelAccess().getStatementsAssignment(), "rule__Model__StatementsAssignment");
					put(grammarAccess.getInputStatementAccess().getNameAssignment_1(), "rule__InputStatement__NameAssignment_1");
					put(grammarAccess.getInputStatementAccess().getColumnsAssignment_3_2(), "rule__InputStatement__ColumnsAssignment_3_2");
					put(grammarAccess.getInputStatementAccess().getColumnsAssignment_3_3_1(), "rule__InputStatement__ColumnsAssignment_3_3_1");
					put(grammarAccess.getOutputStatementAccess().getNameAssignment_1(), "rule__OutputStatement__NameAssignment_1");
					put(grammarAccess.getOutputStatementAccess().getInputsAssignment_3(), "rule__OutputStatement__InputsAssignment_3");
					put(grammarAccess.getOutputStatementAccess().getInputsAssignment_4_1(), "rule__OutputStatement__InputsAssignment_4_1");
					put(grammarAccess.getOutputStatementAccess().getMethodsAssignment_6_0(), "rule__OutputStatement__MethodsAssignment_6_0");
					put(grammarAccess.getOutputStatementAccess().getMethodsAssignment_6_1_1(), "rule__OutputStatement__MethodsAssignment_6_1_1");
					put(grammarAccess.getOnRecievedAccess().getNameAssignment_1(), "rule__OnRecieved__NameAssignment_1");
					put(grammarAccess.getColumnAccess().getNameAssignment_0(), "rule__Column__NameAssignment_0");
					put(grammarAccess.getColumnAccess().getTypeAssignment_1(), "rule__Column__TypeAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			com.frantz.drewio.ui.contentassist.antlr.internal.InternalDrewIOParser typedParser = (com.frantz.drewio.ui.contentassist.antlr.internal.InternalDrewIOParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public DrewIOGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(DrewIOGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
