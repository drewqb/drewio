/*
* generated by Xtext
*/
package com.frantz.drewio.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DrewIOGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//Model:
		//	statements+=Statement*;
		public ParserRule getRule() { return rule; }

		//statements+=Statement*
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInputStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOutputStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Statement:
		//	InputStatement | OutputStatement;
		public ParserRule getRule() { return rule; }

		//InputStatement | OutputStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//InputStatement
		public RuleCall getInputStatementParserRuleCall_0() { return cInputStatementParserRuleCall_0; }

		//OutputStatement
		public RuleCall getOutputStatementParserRuleCall_1() { return cOutputStatementParserRuleCall_1; }
	}

	public class InputStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTypeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cColumnsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cColumnsColumnParserRuleCall_3_2_0 = (RuleCall)cColumnsAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cColumnsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cColumnsColumnParserRuleCall_3_3_1_0 = (RuleCall)cColumnsAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//InputStatement:
		//	"input" name=ID "{" ("type" "(" columns+=Column ("," columns+=Column)* ")")? ";" "}";
		public ParserRule getRule() { return rule; }

		//"input" name=ID "{" ("type" "(" columns+=Column ("," columns+=Column)* ")")? ";" "}"
		public Group getGroup() { return cGroup; }

		//"input"
		public Keyword getInputKeyword_0() { return cInputKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("type" "(" columns+=Column ("," columns+=Column)* ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"type"
		public Keyword getTypeKeyword_3_0() { return cTypeKeyword_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }

		//columns+=Column
		public Assignment getColumnsAssignment_3_2() { return cColumnsAssignment_3_2; }

		//Column
		public RuleCall getColumnsColumnParserRuleCall_3_2_0() { return cColumnsColumnParserRuleCall_3_2_0; }

		//("," columns+=Column)*
		public Group getGroup_3_3() { return cGroup_3_3; }

		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }

		//columns+=Column
		public Assignment getColumnsAssignment_3_3_1() { return cColumnsAssignment_3_3_1; }

		//Column
		public RuleCall getColumnsColumnParserRuleCall_3_3_1_0() { return cColumnsColumnParserRuleCall_3_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class OutputStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OutputStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cReceivesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInputsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cInputsStatementCrossReference_3_0 = (CrossReference)cInputsAssignment_3.eContents().get(0);
		private final RuleCall cInputsStatementIDTerminalRuleCall_3_0_1 = (RuleCall)cInputsStatementCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInputsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cInputsStatementCrossReference_4_1_0 = (CrossReference)cInputsAssignment_4_1.eContents().get(0);
		private final RuleCall cInputsStatementIDTerminalRuleCall_4_1_0_1 = (RuleCall)cInputsStatementCrossReference_4_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cMethodsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cMethodsOnRecievedParserRuleCall_6_0_0 = (RuleCall)cMethodsAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cMethodsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cMethodsOnRecievedParserRuleCall_6_1_1_0 = (RuleCall)cMethodsAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//OutputStatement:
		//	"output" name=ID "receives" inputs+=[Statement] ("," inputs+=[Statement])* "{" (methods+=OnRecieved (","
		//	methods+=OnRecieved)*)? "}";
		public ParserRule getRule() { return rule; }

		//"output" name=ID "receives" inputs+=[Statement] ("," inputs+=[Statement])* "{" (methods+=OnRecieved (","
		//methods+=OnRecieved)*)? "}"
		public Group getGroup() { return cGroup; }

		//"output"
		public Keyword getOutputKeyword_0() { return cOutputKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"receives"
		public Keyword getReceivesKeyword_2() { return cReceivesKeyword_2; }

		//inputs+=[Statement]
		public Assignment getInputsAssignment_3() { return cInputsAssignment_3; }

		//[Statement]
		public CrossReference getInputsStatementCrossReference_3_0() { return cInputsStatementCrossReference_3_0; }

		//ID
		public RuleCall getInputsStatementIDTerminalRuleCall_3_0_1() { return cInputsStatementIDTerminalRuleCall_3_0_1; }

		//("," inputs+=[Statement])*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//inputs+=[Statement]
		public Assignment getInputsAssignment_4_1() { return cInputsAssignment_4_1; }

		//[Statement]
		public CrossReference getInputsStatementCrossReference_4_1_0() { return cInputsStatementCrossReference_4_1_0; }

		//ID
		public RuleCall getInputsStatementIDTerminalRuleCall_4_1_0_1() { return cInputsStatementIDTerminalRuleCall_4_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//(methods+=OnRecieved ("," methods+=OnRecieved)*)?
		public Group getGroup_6() { return cGroup_6; }

		//methods+=OnRecieved
		public Assignment getMethodsAssignment_6_0() { return cMethodsAssignment_6_0; }

		//OnRecieved
		public RuleCall getMethodsOnRecievedParserRuleCall_6_0_0() { return cMethodsOnRecievedParserRuleCall_6_0_0; }

		//("," methods+=OnRecieved)*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//","
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }

		//methods+=OnRecieved
		public Assignment getMethodsAssignment_6_1_1() { return cMethodsAssignment_6_1_1; }

		//OnRecieved
		public RuleCall getMethodsOnRecievedParserRuleCall_6_1_1_0() { return cMethodsOnRecievedParserRuleCall_6_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class OnRecievedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OnRecieved");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameStatementCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameStatementIDTerminalRuleCall_1_0_1 = (RuleCall)cNameStatementCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//OnRecieved:
		//	"on" name=[Statement] "{" "}";
		public ParserRule getRule() { return rule; }

		//"on" name=[Statement] "{" "}"
		public Group getGroup() { return cGroup; }

		//"on"
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }

		//name=[Statement]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//[Statement]
		public CrossReference getNameStatementCrossReference_1_0() { return cNameStatementCrossReference_1_0; }

		//ID
		public RuleCall getNameStatementIDTerminalRuleCall_1_0_1() { return cNameStatementIDTerminalRuleCall_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Column");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeDataTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//Column:
		//	name=ID type=DataType;
		public ParserRule getRule() { return rule; }

		//name=ID type=DataType
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//type=DataType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_1_0() { return cTypeDataTypeParserRuleCall_1_0; }
	}

	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBooleanKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cIntegerKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cFloatKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//DataType:
		//	"boolean" | "string" | "integer" | "float";
		public ParserRule getRule() { return rule; }

		//"boolean" | "string" | "integer" | "float"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"boolean"
		public Keyword getBooleanKeyword_0() { return cBooleanKeyword_0; }

		//"string"
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }

		//"integer"
		public Keyword getIntegerKeyword_2() { return cIntegerKeyword_2; }

		//"float"
		public Keyword getFloatKeyword_3() { return cFloatKeyword_3; }
	}
	
	
	private ModelElements pModel;
	private StatementElements pStatement;
	private InputStatementElements pInputStatement;
	private OutputStatementElements pOutputStatement;
	private OnRecievedElements pOnRecieved;
	private ColumnElements pColumn;
	private DataTypeElements pDataType;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public DrewIOGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.frantz.drewio.DrewIO".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	statements+=Statement*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Statement:
	//	InputStatement | OutputStatement;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//InputStatement:
	//	"input" name=ID "{" ("type" "(" columns+=Column ("," columns+=Column)* ")")? ";" "}";
	public InputStatementElements getInputStatementAccess() {
		return (pInputStatement != null) ? pInputStatement : (pInputStatement = new InputStatementElements());
	}
	
	public ParserRule getInputStatementRule() {
		return getInputStatementAccess().getRule();
	}

	//OutputStatement:
	//	"output" name=ID "receives" inputs+=[Statement] ("," inputs+=[Statement])* "{" (methods+=OnRecieved (","
	//	methods+=OnRecieved)*)? "}";
	public OutputStatementElements getOutputStatementAccess() {
		return (pOutputStatement != null) ? pOutputStatement : (pOutputStatement = new OutputStatementElements());
	}
	
	public ParserRule getOutputStatementRule() {
		return getOutputStatementAccess().getRule();
	}

	//OnRecieved:
	//	"on" name=[Statement] "{" "}";
	public OnRecievedElements getOnRecievedAccess() {
		return (pOnRecieved != null) ? pOnRecieved : (pOnRecieved = new OnRecievedElements());
	}
	
	public ParserRule getOnRecievedRule() {
		return getOnRecievedAccess().getRule();
	}

	//Column:
	//	name=ID type=DataType;
	public ColumnElements getColumnAccess() {
		return (pColumn != null) ? pColumn : (pColumn = new ColumnElements());
	}
	
	public ParserRule getColumnRule() {
		return getColumnAccess().getRule();
	}

	//DataType:
	//	"boolean" | "string" | "integer" | "float";
	public DataTypeElements getDataTypeAccess() {
		return (pDataType != null) ? pDataType : (pDataType = new DataTypeElements());
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
